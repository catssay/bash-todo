#!/bin/bash -e

todo_flag=' '
done_flag='+'
todo_color='91'
done_color='92'
todo_file_fmt='%Y-%m-%d'
todo_item_time_fmt='%H:%M'
todo_folder="${HOME}/.todo"
todo_file="${todo_folder}/$(date +${todo_file_fmt}).txt"

command_name="$1"
date_params=""
if [ -n "$command_name" ]; then
    shift 1
fi
while getopts ":d:" opt; do
    case $opt in
	d )
	    date_params=$(date -d "$OPTARG" +${todo_file_fmt})
	    if [ -n "$date_params" ]; then
		todo_file=""${todo_folder}/${date_params}.txt""
	    fi
	    ;;
    esac
done
shift $(($OPTIND - 1))
command_params="${@#$0}"

usage () {
    cat <<EOF | xargs -I{} echo -e {}
Usage: $0 [COMMAND] [OPTIONS]
COMMANDS:
\\\\t \\\e[1madd    | a\\\e[0m   \\\e[4mCONTENT\\\e[0m       add CONTENT to todo list.
\\\\t \\\e[1mlist   | ls\\\e[0m  [ \\\e[4mDATE\\\e[0m ]      show DATE\'s todo list, default DATE is today.
\\\\t \\\e[1mremove | rm\\\e[0m  [ \\\e[4mN\\\e[0m ] ...     remove todo item of line N, default is all lines.
\\\\t \\\e[1mmark   | m\\\e[0m   [ \\\e[4mN\\\e[0m ] ...     mark todo item of line N as completed, default is all lines.
\\\\t \\\e[1munmark | um\\\e[0m  [ \\\e[4mN\\\e[0m ] ...     mark todo itemof line N as uncompleted. default is all lines.

OPTIONS:
\\\\t -d  \\\e[4m DATE \\\e[0m  which day to be operated, default is today.
DESCRIPTION:
\\\\t \\\e[4mDATE\\\e[0m               DATE is like '"'today'"' '"'tomorrow'"' '"'last 2 days'"' '"'2017-11-11'"' etc,
\\\\t """"""     """"""""              which can be recognized be GNU date program.
\\\\t \\\e[4mN\\\e[0m                  N is a positive number.
EXAMPLES:
\\\\t todo add 'go shopping'
\\\\t todo add -d 'tomorrow' 'fix bugs'
\\\\t todo ls
\\\\t todo ls -d 'last 2 days'
\\\\t todo rm 2
\\\\t todo m -d 'last day' 2, 3
\\\\t todo um -d '2017-11-11' 1
EOF
}

get_todo_folder () {
    if ! [ -d "$todo_folder" ]; then
	mkdir -p "$todo_folder"
    fi
}

get_todo_file () {
    get_todo_folder
    if ! [ -f "$todo_file" ]; then
	touch "$todo_file"
    fi
}

get_line_number () {
    echo "$command_params" |sed -rn '/^( *[1-9]+)((,? *| +)[1-9]+)* *$/p' |sed 's/,/ /g'
}

ls_item () {
    local target_file="$todo_file"
    if [ -f "$target_file" ]; then
	if [ -z "$(cat $target_file)" ]; then
	    exit 0
	fi
	cat "$target_file" | awk -f <(cat <<EOF
BEGAIN { done_count = 0; todo_count = 0 }
{
  is_item_done = (\$0 ~ /^${done_flag}/)
  line_color = is_item_done ? "$done_color" : "$todo_color"

  if (is_item_done) done_count += 1
  else todo_count += 1

  color_str = line_color ? "\\033[" line_color "m" : ""
  printf("%s%s  %s %s \n", color_str, NR, \$0, "\\033[0m")
}
END {
  format = "- Todo: %d   - Done: %d"
  printf(format, todo_count, done_count)
}
EOF
) | xargs -I{} echo -e {}
    fi
}

add_item () {
    get_todo_file
    local content="$todo_flag $command_params"
    if [ -n "$command_params" ]; then
	if [ -z "$(cat $todo_file)" ]; then
	    echo -e "$content" > "$todo_file"
	else
	    echo -e "$content" >> "$todo_file"
	fi
    else
	usage
    fi
}

op_item () {
    get_todo_file
    local line_number_array=$(get_line_number)
    if [ -z "$command_params" ]; then
	line_number_array=()
    else
	if [ -z "${line_number_array[*]}" ]; then
	    usage
	fi
    fi
    local content
    local sed_line_numbers=$(echo ${line_number_array[*]} |sed -r 's/ +/,/g')
    case "$1" in
	mark )
	    content=$(sed -r "${sed_line_numbers}s/^${todo_flag}/${done_flag}/" $todo_file)
	    ;;
	remove )
	    content=$(sed "${sed_line_numbers}d" $todo_file)
	    ;;
	unmark )
	    content=$(sed -r "${sed_line_numbers}s/^\\${done_flag}/${todo_flag}/" $todo_file)
	    ;;
	* )
	    usage
    esac
    if [ -z "${line_number_array[*]}" ]; then
	ls_item
	echo -ne "Are you really want to $1 all todo items ? [Y, N]: "
	local choice_action
	read choice_action
	case "$choice_action" in
	    Y | y | Yes | YES | yes )
		echo -e "$content" > "$todo_file"
		;;
	    N | n | No | NO | * )
		exit 0
		;;
	esac
    else
	echo -e "$content" > "$todo_file"
    fi
    ls_item
}

if [ -z "$command_name" ]; then
    ls_item
    exit 0
fi

case "$command_name" in
    a | add )
	add_item
	;;
    ls | list)
	ls_item
	;;
    rm | remove)
	op_item remove
	;;
    m | mark )
	op_item mark
	;;
    um | unmark )
	op_item unmark
	;;
    * )
	usage
	;;
esac
